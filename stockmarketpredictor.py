# -*- coding: utf-8 -*-
"""StockmarketPredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_kZNLmIF7nUhu1iI5kqQjIYH7w_PSxiH

# **Tata Stocks**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset_train = pd.read_csv('/content/NSE-TATAGLOBAL.csv')

new_column_names = {
    'Total Trade Quantity': 'Total Volume',
    'Turnover (Lacs)': 'Turnover'
}
dataset_train.rename(columns=new_column_names, inplace=True)

dataset_train

df_test = dataset_train.head(100)

#Graphing open and close price for past 100 days
plt.figure(figsize=(14,6))
plt.plot(df_test['Date'], df_test['Open'], label='Open')
plt.plot(df_test['Date'], df_test['Close'], label='Close')
plt.title('Open and Close price')
plt.ylabel('Price in rupees')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test['Date'][i] for i in range(len(df_test['Date'])) if i % 2 == 0]  # Select every other tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.legend()

plt.show()

#Graphing highs and lows for past 100 days
plt.figure(figsize=(14,6))
plt.plot(df_test['Date'], df_test['High'], label='High', color='green')
plt.plot(df_test['Date'], df_test['Low'], label='Low', color='red')
plt.title('High and Low price')
plt.ylabel('Price in rupees')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test['Date'][i] for i in range(len(df_test['Date'])) if i % 2 == 0]  # Select every other tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.legend()

plt.show()

#Graphing total trade quantity for past 100 days
plt.figure(figsize=(8,4))
plt.plot(df_test['Date'], df_test['Total Volume'])
plt.title('Total Trade Quanitity over time')
plt.ylabel('Total Trade Quantity')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test['Date'][i] for i in range(len(df_test['Date'])) if i % 3 == 0]  # Select every third tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.show()

#Graphing turnovers for past 100 days
plt.figure(figsize=(8,4))
plt.plot(df_test['Date'], df_test['Turnover'])
plt.title('Turnover (Lacs) over time')
plt.ylabel('Turnover (Lacs)')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test['Date'][i] for i in range(len(df_test['Date'])) if i % 3 == 0]  # Select every third tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.show()

# Feature Scaling
training_set = dataset_train.iloc[:, 1:2].values
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

# Creating a data structure with 60 timesteps and 1 output
X_train = []
y_train = []
for i in range(60, 2035):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

# Reshaping
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Part 2 - Building the RNN

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs = 100, batch_size = 32)

# Part 3 - Making the predictions and visualising the results

# Getting the real stock price of 2017
dataset_test = pd.read_csv('tatatest.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values

dataset_test

# Getting the predicted stock price of 2017
dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 76):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Visualising the results
plt.plot(real_stock_price, color = 'red', label = 'Real TATA Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted TATA Stock Price')
plt.title('TATA Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('TATA Stock Price')
plt.legend()
plt.show()

"""# **Stocks**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""### Neural Network"""

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train_adani.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""### stock # 1"""

dataset_train_adani = pd.read_csv('/content/ADANIPORTS.csv')

del dataset_train_adani['Symbol']
del dataset_train_adani['Series']
del dataset_train_adani['VWAP']
del dataset_train_adani['Trades']
del dataset_train_adani['Deliverable Volume']
del dataset_train_adani['%Deliverble']

df_test_adani = dataset_train_adani.head(100)

#Graphing open and close price for past 100 days
plt.figure(figsize=(14,6))
plt.plot(df_test_adani['Date'], df_test_adani['Open'], label='Open')
plt.plot(df_test_adani['Date'], df_test_adani['Close'], label='Close')
plt.title('Open and Close price')
plt.ylabel('Price in rupees')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test_adani['Date'][i] for i in range(len(df_test_adani['Date'])) if i % 2 == 0]  # Select every other tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.legend()

plt.show()

# Feature Scaling
training_set_adani = dataset_train_adani['Open'].values.reshape(-1,1)

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled_adani = sc.fit_transform(training_set_adani)

# Creating a data structure with 60 timesteps and 1 output
X_train_adani = []
y_train_adani = []
for i in range(60, len(training_set_adani)):
    X_train_adani.append(training_set_scaled_adani[i-60:i, 0])
    y_train_adani.append(training_set_scaled_adani[i, 0])
X_train_adani, y_train_adani = np.array(X_train_adani), np.array(y_train_adani)

# Reshaping
X_train_adani = np.reshape(X_train_adani, (X_train_adani.shape[0], X_train_adani.shape[1], 1))

# Splitting for train and test data
from sklearn.model_selection import train_test_split
X_train_adani, X_test_adani, y_train_adani,y_test_adani = train_test_split(X_train_adani, y_train_adani, test_size=0.2, random_state=42)

# Fitting the RNN to the Training set
regressor.fit(X_train_adani, y_train_adani, epochs = 100, batch_size = 32)

# Getting the predicted stock price of 2017
X_test = np.reshape(X_test_adani, (X_test_adani.shape[0], X_test_adani.shape[1], 1))
predicted_stock_price_adani = regressor.predict(X_test_adani)
predicted_stock_price_adani = sc.inverse_transform(predicted_stock_price_adani)

real_stock_price_adani = sc.inverse_transform(y_test_adani[:len(predicted_stock_price_adani)].reshape(-1,1))

# Visualising the results for 30 timestamps
plt.plot(real_stock_price_adani, color = 'red', label = 'Real Adani Ports Stock Price')
plt.plot(predicted_stock_price_adani, color = 'blue', label = 'Predicted Adani Ports Stock Price')
plt.title('Adani Ports Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Adani Ports Stock Price')
plt.xlim(0,40)
plt.legend()
plt.show()

"""#### **Making predictions**"""

def predictStock():
    date = input("Enter today's date. YYYY-MM-DD: ")
    try:
        idx = dataset_train_adani[dataset_train_adani['Date'] == date].index[0]
        dataset = dataset_train_adani[:idx+1]
    except:
        print("Data not available for this particular date")

    dataset = dataset['Open'].values.reshape(-1,1)
    dataset_scaled = sc.fit_transform(dataset)

    # Creating a data structure with 60 timesteps and 1 output
    dataset = []
    for i in range(60, len(dataset_scaled)):
        dataset.append(dataset_scaled[i-60:i, 0])
    dataset = np.array(dataset)

    data_test = np.reshape(dataset, (dataset.shape[0], dataset.shape[1], 1))

    predictions = regressor.predict(data_test)
    predictions = sc.inverse_transform(predictions)

    return predictions, idx

def calculateStats(predictions):
    next_day_pred = predictions[-1][0]
    previous_day_price = predictions[-2][0]
    increase = round(100 * (next_day_pred - previous_day_price) / previous_day_price, 2)

    return next_day_pred, increase

def plotPredictionsGraph(predictions):
    predictions_last30days = predictions[len(predictions)-32:]

    # Visualising prediction
    # Shows graph for last 30 days (1 month) and the next day's predicted value
    plt.figure(figsize=(10,6))
    plt.plot(predictions_last30days, color = 'blue', label = 'Predicted Adani Ports Stock Price ')
    plt.scatter(31, predictions_last30days[-1], marker='x', color='red', s=100)

    arrow_x = 31
    arrow_y = predictions_last30days[-1] - 2
    # Add the arrow using annotate()
    plt.annotate("    Predicted Price Tomorrow",
             xy=(arrow_x, arrow_y),
             arrowprops=dict(facecolor='green', shrink=0.05))

    # Customize the tick names on the x-axis
    new_tick_names = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, 'Tomorrow']
    plt.gca().set_xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])
    plt.gca().set_xticklabels(new_tick_names)
    plt.gca().get_xticklabels()[-1].set_rotation(90)

    plt.title('Adani Ports Stock Price Last 30 days')
    plt.xlabel('Days ago')
    plt.ylabel('Adani Ports Stock Price')
    plt.legend()
    plt.show()

predictions, idx = predictStock()

next_day_pred_adani, increase_adani = calculateStats(predictions)
print(f"The price predicted for tomorrow is: {next_day_pred_adani} \nThis is a {increase_adani} % increase from today")

plotPredictionsGraph(predictions)

"""### stock # 2"""

dataset_train_asian = pd.read_csv('/content/ASIANPAINT.csv')

del dataset_train_asian['Symbol']
del dataset_train_asian['Series']
del dataset_train_asian['VWAP']
del dataset_train_asian['Trades']
del dataset_train_asian['Deliverable Volume']
del dataset_train_asian['%Deliverble']

df_test_asian = dataset_train_asian.head(100)

#Graphing open and close price for past 100 days
plt.figure(figsize=(14,6))
plt.plot(df_test_asian['Date'], df_test_asian['Open'], label='Open')
plt.plot(df_test_asian['Date'], df_test_asian['Close'], label='Close')
plt.title('Open and Close price')
plt.ylabel('Price in rupees')
plt.xlabel('Date')

# Set alternate x-ticks
xticks_positions = [df_test_asian['Date'][i] for i in range(len(df_test_asian['Date'])) if i % 2 == 0]  # Select every other tick position
xticks_labels = [i for i in xticks_positions]  # Provide labels for the selected tick positions
plt.xticks(xticks_positions, xticks_labels)
plt.xticks(rotation=90)

plt.legend()

plt.show()

# Feature Scaling
training_set_asian = dataset_train_asian['Open'].values.reshape(-1,1)

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled_asian = sc.fit_transform(training_set_asian)

# Creating a data structure with 60 timesteps and 1 output
X_train_asian = []
y_train_asian = []
for i in range(60, len(training_set_asian)):
    X_train_asian.append(training_set_scaled_asian[i-60:i, 0])
    y_train_asian.append(training_set_scaled_asian[i, 0])
X_train_asian, y_train_asian = np.array(X_train_asian), np.array(y_train_asian)

# Reshaping
X_train_asian = np.reshape(X_train_asian, (X_train_asian.shape[0], X_train_asian.shape[1], 1))

# Splitting for train and test data
from sklearn.model_selection import train_test_split
X_train_asian, X_test_asian, y_train_asian,y_test_asian = train_test_split(X_train_asian, y_train_asian, test_size=0.2, random_state=42)

# Fitting the RNN to the Training set
regressor.fit(X_train_adani, y_train_adani, epochs = 100, batch_size = 32)

# Getting the predicted stock price of 2017
X_test = np.reshape(X_test_asian, (X_test_asian.shape[0], X_test_asian.shape[1], 1))
predicted_stock_price_asian = regressor.predict(X_test_asian)
predicted_stock_price_asian = sc.inverse_transform(predicted_stock_price_asian)

real_stock_price_asian = sc.inverse_transform(y_test_asian[:len(predicted_stock_price_asian)].reshape(-1,1))

# Visualising the results for 30 timestamps
plt.plot(real_stock_price_asian, color = 'red', label = 'Real Asian Paints Stock Price')
plt.plot(predicted_stock_price_asian, color = 'blue', label = 'Predicted Asian Paints Stock Price')
plt.title('Asian Paints Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Asian Paints Stock Price')
plt.xlim(0,40)
plt.legend()
plt.show()

"""#### Making predicitons"""

def predictStock():
    date = input("Enter today's date. YYYY-MM-DD: ")
    try:
        idx = dataset_train_asian[dataset_train_asian['Date'] == date].index[0]
        dataset = dataset_train_asian[:idx+1]
    except:
        print("Data not available for this particular date")

    dataset = dataset['Open'].values.reshape(-1,1)
    dataset_scaled = sc.fit_transform(dataset)

    # Creating a data structure with 60 timesteps and 1 output
    dataset = []
    for i in range(60, len(dataset_scaled)):
        dataset.append(dataset_scaled[i-60:i, 0])
    dataset = np.array(dataset)

    data_test = np.reshape(dataset, (dataset.shape[0], dataset.shape[1], 1))

    predictions = regressor.predict(data_test)
    predictions = sc.inverse_transform(predictions)

    return predictions, idx

def calculateStats(predictions):
    next_day_pred = predictions[-1][0]
    previous_day_price = predictions[-2][0]
    increase = round(100 * (next_day_pred - previous_day_price) / previous_day_price, 2)

    return next_day_pred, increase

def plotPredictionsGraph(predictions):
    predictions_last30days = predictions[len(predictions)-32:]

    # Visualising prediction
    # Shows graph for last 30 days (1 month) and the next day's predicted value
    plt.figure(figsize=(10,6))
    plt.plot(predictions_last30days, color = 'blue', label = 'Predicted Asian Paints Stock Price ')
    plt.scatter(31, predictions_last30days[-1], marker='x', color='red', s=100)

    arrow_x = 31
    arrow_y = predictions_last30days[-1] - 2
    # Add the arrow using annotate()
    plt.annotate("    Predicted Price Tomorrow",
             xy=(arrow_x, arrow_y),
             arrowprops=dict(facecolor='green', shrink=0.05))

    # Customize the tick names on the x-axis
    new_tick_names = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, 'Tomorrow']
    plt.gca().set_xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])
    plt.gca().set_xticklabels(new_tick_names)
    plt.gca().get_xticklabels()[-1].set_rotation(90)

    plt.title('Asian Paints Stock Price Last 30 days')
    plt.xlabel('Days ago')
    plt.ylabel('Asian paints Stock Price')
    plt.legend()
    plt.show()

predictions, idx = predictStock()

next_day_pred_asian, increase_asian = calculateStats(predictions)
print(f"The price predicted for tomorrow is: {next_day_pred_asian} \nThis is a {increase_asian} % increase from today")

plotPredictionsGraph(predictions)

"""### Compare stocks"""

def compareStocks(adani_increase, asian_increase):
    if adani_increase > asian_increase:
        print(f"Adani Ports has higher predicted increase with {adani_increase}% as compared to Asian Paints {asian_increase}%")
    else:
        print(f"Asian Paints has higher predicted increase with {asian_increase}% as compared to Adani Ports {adani_increase}%")

compareStocks(increase_adani, increase_asian)